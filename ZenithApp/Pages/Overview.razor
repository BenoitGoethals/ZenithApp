@page "/Overview"
@using global::ZenithApp.model
@using Microsoft.EntityFrameworkCore

@inject Register register
@attribute [Authorize]
<AuthorizeView Roles="admin">
    <Authorized>
        Authorized @context.User.Identity.Name
    </Authorized>
    <NotAuthorized>
        NotAuthorized @context.User.Identity.Name
    </NotAuthorized>
</AuthorizeView>


<BSTable IsHoverable="true">
    <thead>
        <tr>
            <th scope="col">Date</th>
            <th scope="col">Email</th>
            <th scope="col">Gsm</th>
            <th scope="col">Payed</th>
            <th scope="col">Total</th>
            <th scope="col">Vat</th>
            <th scope="col">Collected</th>
            <th scope="col">Detail</th>
            <th scope="col">Pay</th>
            <th scope="col">Collected</th>
            <th scope="col">Delete</th>
        </tr>
    </thead>
    <tbody>

        @foreach (var bask in _baskets)
        {

            SizeLarge[_count] = new BSModal();
            <tr>
                <th scope="row">@bask.DateTimeCreated</th>
                <td>@bask.Email</td>
                <td>@bask.Gsm</td>
                <td>@bask.Payed</td>
                <td>@bask.Total()</td>
                <td>@bask.TotalVat()</td>
                <td>@bask.Collected</td>



                <td><BSButton Color="Color.Warning" @onclick="@(() => SizeLarge[_count].Show())">Detail</BSButton></td>
                <BSModal @ref="SizeLarge[_count]" Size="Size.Large">
                    <BSModalHeader OnClick="@(() => SizeLarge[_count].Hide())">
                        <p>Detail Basket</p>
                    </BSModalHeader>
                    <BSModalBody>
                        <table>


                            <thead>
                                <tr>
                                    <th scope="col">Name</th>
                                    <th scope="col">Description</th>
                                    <th scope="col">Price</th>
                                    <th scope="col">count</th>
                                    <th scope="col">Vat</th>
                                    <th scope="col">Total</th>

                                </tr>
                            </thead>
                            <tbody>

                                @foreach (var orderline in bask.AllLines())
                                {
                                    <tr>
                                        <th scope="row">@orderline.Product.Name</th>
                                        <td>@orderline.Product.Description</td>
                                        <td>@orderline.Product.Price</td>
                                        <td>@orderline.Count</td>
                                        <td>@orderline.Product.VatPercentage</td>
                                        <td>@orderline.Total()</td>

                                    </tr>
                                }



                            </tbody>
                        </table>
                    </BSModalBody>
                    <BSModalFooter>
                        <BSButton Color="Color.Secondary" @onclick="@(() => SizeLarge[_count].Hide())">Close</BSButton>

                    </BSModalFooter>
                </BSModal>



                <td><BSButton Color="Color.Warning" OnClick="@(() => @Pay(bask))" IsDisabled="Auth">Pay</BSButton></td>
                <td><BSButton Color="Color.Warning" OnClick="@(() => @Collected(bask))" IsDisabled="Auth" IsActive="@(!bask.Collected)">Collected</BSButton></td>
                <td><BSButton Color="Color.Warning" OnClick="@(() => @Delete(bask))" IsDisabled="Auth">Delete</BSButton></td>


            </tr>
          //  UpdateCounter();
            ;
        }
        _count=0

    </tbody>
</BSTable>
@code{

    [CascadingParameter] private Task<AuthenticationState> AuthenState { get; set; }
    public bool Auth { get; set; }
    private int _count = 0;

    private List<Basket> _baskets = new List<Basket>();

    BSModal[] SizeLarge { get; set; }

    private void Pay(Basket bask)
    {
        bask.Payed = true;

    }

    private async void Delete(Basket bask)
    {
        register.Remove(bask);
        await InvokeAsync(StateHasChanged);
    }

    private void Collected(Basket bask)
    {
        bask.Collected = !bask.Collected;
    }

    private void UpdateCounter()
    {
        ++_count;
    }


    protected override async Task OnInitializedAsync()
    {
        _count = 0;

        register.Subsribe(Update);
        _baskets = register.All();
        SizeLarge = new BSModal[_baskets.Count + 1];
        var au = await AuthenState;
        Auth = !au.User.Identity.IsAuthenticated;
        await InvokeAsync(StateHasChanged);
    }


    private void Update()
    {

        _baskets = register.All();

        InvokeAsync(StateHasChanged);


    }

}